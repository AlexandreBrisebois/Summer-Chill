name: github-actions-summer-chill

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.
    branches: [ main ]  # Ensure tags are on main branch

env:
  IMAGE_NAME: summer-chill
  DOCKER_REPOSITORY: ${{ secrets.DOCKERHUB_USERNAME }}/summer-chill
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: docker-hub

    if: startsWith(github.ref, 'refs/tags/')  # Only run on tag pushes
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags
    
    - name: Verify tag is on main branch
      run: |
        # Check if the tag points to a commit that exists on main branch
        TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref }})
        if ! git merge-base --is-ancestor $TAG_COMMIT origin/main; then
          echo "Error: Tag ${{ github.ref }} is not on the main branch"
          exit 1
        fi
        echo "Tag ${{ github.ref }} is on main branch âœ“"
    
    - name: Extract tag name
      id: extract_tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Build .NET application
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_REPOSITORY }}:${{ steps.extract_tag.outputs.tag }}
          ${{ env.DOCKER_REPOSITORY }}:latest
    
    - name: Output deployment information
      run: |
        echo "Docker Hub Repository: ${{ env.DOCKER_REPOSITORY }}"
        echo "Tagged Image: ${{ env.DOCKER_REPOSITORY }}:${{ steps.extract_tag.outputs.tag }}"
        echo "Latest Image: ${{ env.DOCKER_REPOSITORY }}:latest"

        echo "Git Tag: ${{ steps.extract_tag.outputs.tag }}"
